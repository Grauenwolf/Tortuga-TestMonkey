using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Text;

namespace Tortuga.TestMonkey;

[Generator]
public class TestGenerator : ISourceGenerator
{
    public void Execute(GeneratorExecutionContext context)
    {
        // retrieve the populated receiver 
        if (!(context.SyntaxContextReceiver is SyntaxReceiver receiver))
            return;

        //Write the source code.
        foreach (var workItem in receiver.WorkItems)
        {
            var fileName = workItem.TestClass.FullName() + ".cs";
            var code = new CodeWriter(workItem.TestFramework);


            code.AppendLine("//This file was generated by Tortuga Test Monkey");

            code.AppendLine();
            code.AddTestFramework();
            code.AppendLine();
            using (code.BeginScope($"namespace {workItem.TestClass.FullNamespace()}"))
            {
                using (code.BeginScope($"partial class {workItem.TestClass.Name}"))
                {
                    code.AppendLine();
                    code.AppendLine("//Helper Functions");
                    code.AppendLine($@"partial void CreateObject(ref {workItem.ClassUnderTest.FullName()}? objectUnderTest);");
                    code.AppendLine();

                    if (workItem.ClassUnderTest.HasDefaultConstructor())
                    {
                        code.AppendLine($@"{workItem.ClassUnderTest.FullName()} CreateObject()
		{{
			{workItem.ClassUnderTest.FullName()}? result = null;
			CreateObject(ref result);
			if (result != null)
				return result;

			return new {workItem.ClassUnderTest.FullName()}();
		}}");
                    }
                    else
                    {
                        code.AppendLine($@"{workItem.ClassUnderTest.FullName()} CreateObject()
		{{
			{workItem.ClassUnderTest.FullName()}? result = null;
			CreateObject(ref result);
			if (result != null)
				return result;

			throw new System.NotImplementedException(""Please implement the method 'partial void CreateObject(ref { workItem.ClassUnderTest.FullName()}? objectUnderTest)'."");
		}}");
                    }

                    code.AppendLine();
                    PropertySelfAssign(workItem, code);
                    PropertyDoubleRead(workItem, code);
                }

            }

            context.AddSource(fileName, SourceText.From(code.ToString(), Encoding.UTF8));
        }

        //Write the log entries
        context.AddSource("Logs", SourceText.From($@"/*{ Environment.NewLine + string.Join(Environment.NewLine, receiver.Log) + Environment.NewLine}*/", Encoding.UTF8));
    }


    public void Initialize(GeneratorInitializationContext context)
    {
        // Register a syntax receiver that will be created for each generation pass
        context.RegisterForSyntaxNotifications(() => new SyntaxReceiver());
    }

    static void PropertyDoubleRead(WorkItem workItem, CodeWriter code)
    {
        if (workItem.TestTypes.HasFlag(TestTypes.PropertyDoubleRead))
        {
            code.AppendLine();
            code.AppendLine("//Property Double-read Tests");

            foreach (var property in workItem.ClassUnderTest.ReadableScalarProperties())
            {
                using (code.StartTest($"{property.Name}_DoubleRead"))
                {
                    code.AppendLine("var objectUnderTest = CreateObject();");
                    code.AppendLine($"var readOnce = objectUnderTest.@{property.Name};");
                    code.AppendLine($"var readTwice = objectUnderTest.@{property.Name};");
                    code.AssertAreEqual("readOnce", $"readTwice", "Reading a property twice should return the same value both times.");
                }
            }
        }
    }

    static void PropertySelfAssign(WorkItem workItem, CodeWriter code)
    {
        if (workItem.TestTypes.HasFlag(TestTypes.PropertySelfAssign))
        {
            code.AppendLine();
            code.AppendLine("//Property Self-assignment Tests");

            foreach (var property in workItem.ClassUnderTest.ReadWriteScalarProperties())
            {
                using (code.StartTest($"{property.Name}_SelfAssign"))
                {
                    code.AppendLine("var objectUnderTest = CreateObject();");
                    code.AppendLine($"var originalValue = objectUnderTest.@{property.Name};");
                    code.AppendLine($"objectUnderTest.{property.Name} = originalValue;");
                    code.AssertAreEqual("originalValue", $"objectUnderTest.@{property.Name}", "Assigning a property to itself should not change its value.");
                }

            }
        }
    }
}
